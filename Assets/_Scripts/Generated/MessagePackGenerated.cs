// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace Boxfriend.Serialization.Resolvers
{
    public class BoxfriendResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new BoxfriendResolver();

        private BoxfriendResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = BoxfriendResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class BoxfriendResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static BoxfriendResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(3)
            {
                { typeof(global::Boxfriend.Networking.FlashlightState), 0 },
                { typeof(global::Boxfriend.Networking.KCCMotorState), 1 },
                { typeof(global::Boxfriend.Networking.PlayerState), 2 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new Boxfriend.Serialization.Formatters.Boxfriend.Networking.FlashlightStateFormatter();
                case 1: return new Boxfriend.Serialization.Formatters.Boxfriend.Networking.KCCMotorStateFormatter();
                case 2: return new Boxfriend.Serialization.Formatters.Boxfriend.Networking.PlayerStateFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Boxfriend.Serialization.Formatters.Boxfriend.Networking
{
    public sealed class FlashlightStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Boxfriend.Networking.FlashlightState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Boxfriend.Networking.FlashlightState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.Enabled);
            writer.Write(value.Charge);
        }

        public global::Boxfriend.Networking.FlashlightState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Enabled__ = default(bool);
            var __Charge__ = default(float);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Enabled__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __Charge__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Boxfriend.Networking.FlashlightState(__Enabled__, __Charge__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class KCCMotorStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Boxfriend.Networking.KCCMotorState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Boxfriend.Networking.KCCMotorState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Vector3>(formatterResolver).Serialize(ref writer, value.Position, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Quaternion>(formatterResolver).Serialize(ref writer, value.Rotation, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Vector3>(formatterResolver).Serialize(ref writer, value.BaseVelocity, options);
            writer.Write(value.MustUnground);
            writer.Write(value.MustUngroundTime);
            writer.Write(value.LastMovementIterationFoundAnyGround);
        }

        public global::Boxfriend.Networking.KCCMotorState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Boxfriend.Networking.KCCMotorState();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Position = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Vector3>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Rotation = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Quaternion>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.BaseVelocity = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Vector3>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.MustUnground = reader.ReadBoolean();
                        break;
                    case 4:
                        ____result.MustUngroundTime = reader.ReadSingle();
                        break;
                    case 5:
                        ____result.LastMovementIterationFoundAnyGround = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Boxfriend.Networking.PlayerState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Boxfriend.Networking.PlayerState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Boxfriend.Networking.FlashlightState>(formatterResolver).Serialize(ref writer, value.FlashlightState, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Boxfriend.Networking.KCCMotorState>(formatterResolver).Serialize(ref writer, value.CharacterMotorState, options);
        }

        public global::Boxfriend.Networking.PlayerState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __FlashlightState__ = default(global::Boxfriend.Networking.FlashlightState);
            var __CharacterMotorState__ = default(global::Boxfriend.Networking.KCCMotorState);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __FlashlightState__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Boxfriend.Networking.FlashlightState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __CharacterMotorState__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Boxfriend.Networking.KCCMotorState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Boxfriend.Networking.PlayerState(__FlashlightState__, __CharacterMotorState__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

